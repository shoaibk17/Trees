#include <iostream>
using namespace std;

struct Node{
    int data; 
    struct Node* left, *right;
    
    Node(int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};

void CalCpointer(struct Node* root, Node** first, Node** mid, Node** last, Node** prev){
    if(root == NULL) return;
    CalCpointer(root->left, first, mid, last, prev);
    if(*prev && root->data <(*prev)->data){
        if(!*first){
            *first = *prev;
            *mid = root;
        }
        else{
            *last = root;
        }
    }
    *prev = root;
    CalCpointer(root->right, first, mid, last, prev);
}
void swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

void Restore(struct Node* root){
    Node* first, *mid, *last, *prev;
    first = NULL;
    mid = NULL;
    last = NULL;
    prev = NULL;
    
    CalCpointer(root, &first, &mid, &last, &prev);
                                             //case 1 : Not adjacent 1 8 3 4 5 6 7 2                               
    if(first && last){
        swap(&(first->data), &(last->data));
    }
    else if(first && mid){                  /*case 2 : adjacent Elements: 1 2 4 3 5 6 7 8 */
        swap(&(first->data), &(mid->data));
    }
}

void Inorder(struct Node* root){
    if(root == NULL) return;
    
    Inorder(root->left);
    std::cout << root->data<<" ";
    Inorder(root->right);
    
}
int main() {
	struct Node* root = new Node(6);
	root->left = new Node(9);
	root->right = new Node(3);
	root->left->left = new Node(1);
	root->left->right = new Node(4);
	root->right->right = new Node(13);
	
	Inorder(root);
	cout<<endl;
	Restore(root);
	Inorder(root);
	
	return 0;
}
